important docs: 
ref vs reacive : https://dmitripavlutin.com/ref-reactive-differences-vue/

in vue 2 options api
1)Primitive values
<template>
  <h1>{{msg}}</h1> 
</template>
<script>
export default{
data(){
  return {
    msg: 'hello world'
  }
}
}
</script>

2) for non primitive values
<template>
  <h1>{{msg}}</h1>
  <p>----------------------</p>
  <p>using array</p> 
  <ul>
    <li v-for="(list,index) in message" :key="index">{{list}}</li>
  </ul>
  <p>--------------------------------</p>
  <p>using obj</p>
  <ul>
      <li v-for="employee in employees.data" :key="employee.id">{{employee.name}}</li>
  </ul>
</template>
<script>
export default{
data(){
  return {
    msg: 'hello world',
    message: ["hi","hello","good morning"],
    employees: {
      data: [
      {name: 'Ramani', id: 1111},
      {name: 'kailash',id:222}
    ]
    }
  }
}
}
</script>

3)v-model
what is v-model?
v-model is a Vue directive that creates two-way data binding between a form input and a variable in your component's data. 
This means that when the user updates the input, the variable's value changes, and when the variable changes, the input updates automatically.

Eg 1: on primitive values 
<template>
<input type="text" placeholder="enter feedback" v-model="feedback" />
  <p> {{feedback}}</p>
</template>
<script>
export default{
data(){
  return {
    feedback: ''
  }
}
}
</script>

Eg 2: on non primitive values
<template>
<input type="text" placeholder="message" v-model="message[0]" />
  <p>{{message[0]}}</p>
  <input type="text"  placeholder="employees" v-model="employees.data[0].name" />
  <p>{{employees.data[0].name}}</p>
</template>
<script>
export default{
data(){
  return {
    message: ["hi","hello","good morning"],
    employees: {
      data: [
      {name: 'Ramani', id: 1111},
      {name: 'kailash',id:222}
    ]
    },
  }
}
}
</script>

V.v.v.v.v..v.v..v.imp
Caveat: Reactivity Limitations in Vue 2
Vue 2 does NOT detect changes when:
i)Adding new properties to an object (user.newProp = "test" won’t be reactive).
ii)Changing array length (messages.length = 10 won’t trigger updates).

✅ Workarounds:
a)Use Vue.set() for objects:
Vue.set(user, 'newProp', 'test');

b)Use splice() for arrays:
messages.splice(0, 1, 'Updated message');


in vue 3 composition api
1) Primitive values using ref and reactive()
<template>
   <h1>{{ msg }}</h1>
   <h2>{{message}}</h2>
   <input v-model="message" placeholder="enter" />
</template>

<script setup>
import {ref,reactive} from 'vue';
 const msg =ref('hello world');  // using ref as it is meant for using primitive and object values
 const message = reactive('hello'); // using reactive you will see the output as hello for line no 23 but still when it comes to reactivity, it does not perform as expected.
                                       reactive is meant for object(includes array);
</script>

2) for non primitive values
<template>
  <h1>{{msg}}</h1>
  <p>---------------------------</p>
  <p>using array</p>
  <ul>
    <li v-for="(list,index) in message" :key="index">{{list}}</li>
  </ul>
  <p>--------------------------------</p>
  <p>using obj</p>
  <ul>
    <li v-for="employee in employees.data" :key="employee.id">{{employee.name}}</li>
  </ul>
  <div></div>
<p></p>
</template>

<script setup>
import {ref,reactive} from 'vue';
const msg=ref('hello world');
const message=reactive(["hi","hello","good morning"]);
const employees=reactive({
  data: [
      {name: 'Ramani', id: 1111},
      {name: 'kailash',id:222}
    ]
})
</script>
